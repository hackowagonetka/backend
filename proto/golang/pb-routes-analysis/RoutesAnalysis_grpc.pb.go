// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/RoutesAnalysis.proto

package pb_routes_analysis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesAnalysisClient is the client API for RoutesAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesAnalysisClient interface {
	Analyse(ctx context.Context, in *AnalyseRequest, opts ...grpc.CallOption) (*AnalyseResponse, error)
}

type routesAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesAnalysisClient(cc grpc.ClientConnInterface) RoutesAnalysisClient {
	return &routesAnalysisClient{cc}
}

func (c *routesAnalysisClient) Analyse(ctx context.Context, in *AnalyseRequest, opts ...grpc.CallOption) (*AnalyseResponse, error) {
	out := new(AnalyseResponse)
	err := c.cc.Invoke(ctx, "/routes_analysis.RoutesAnalysis/Analyse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesAnalysisServer is the server API for RoutesAnalysis service.
// All implementations must embed UnimplementedRoutesAnalysisServer
// for forward compatibility
type RoutesAnalysisServer interface {
	Analyse(context.Context, *AnalyseRequest) (*AnalyseResponse, error)
	mustEmbedUnimplementedRoutesAnalysisServer()
}

// UnimplementedRoutesAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesAnalysisServer struct {
}

func (UnimplementedRoutesAnalysisServer) Analyse(context.Context, *AnalyseRequest) (*AnalyseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyse not implemented")
}
func (UnimplementedRoutesAnalysisServer) mustEmbedUnimplementedRoutesAnalysisServer() {}

// UnsafeRoutesAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesAnalysisServer will
// result in compilation errors.
type UnsafeRoutesAnalysisServer interface {
	mustEmbedUnimplementedRoutesAnalysisServer()
}

func RegisterRoutesAnalysisServer(s grpc.ServiceRegistrar, srv RoutesAnalysisServer) {
	s.RegisterService(&RoutesAnalysis_ServiceDesc, srv)
}

func _RoutesAnalysis_Analyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesAnalysisServer).Analyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes_analysis.RoutesAnalysis/Analyse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesAnalysisServer).Analyse(ctx, req.(*AnalyseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutesAnalysis_ServiceDesc is the grpc.ServiceDesc for RoutesAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutesAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes_analysis.RoutesAnalysis",
	HandlerType: (*RoutesAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyse",
			Handler:    _RoutesAnalysis_Analyse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/RoutesAnalysis.proto",
}
