// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: routes_history_query.sql

package db_queries

import (
	"context"
	"encoding/json"
	"time"
)

const routesDistance = `-- name: RoutesDistance :one
SELECT  round (CAST( ST_DistanceSphere( ST_MakePoint($1,$2),ST_MakePoint($3,$4)) AS numeric )) AS meters
`

type RoutesDistanceParams struct {
	StMakepoint   interface{}
	StMakepoint_2 interface{}
	StMakepoint_3 interface{}
	StMakepoint_4 interface{}
}

func (q *Queries) RoutesDistance(ctx context.Context, arg RoutesDistanceParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, routesDistance,
		arg.StMakepoint,
		arg.StMakepoint_2,
		arg.StMakepoint_3,
		arg.StMakepoint_4,
	)
	var meters float64
	err := row.Scan(&meters)
	return meters, err
}

const routesHistoryCreate = `-- name: RoutesHistoryCreate :one
INSERT INTO routes_history ( created_at, data, ref_user_id ) VALUES ( $1, $2, $3 ) RETURNING id
`

type RoutesHistoryCreateParams struct {
	CreatedAt time.Time
	Data      json.RawMessage
	RefUserID int32
}

func (q *Queries) RoutesHistoryCreate(ctx context.Context, arg RoutesHistoryCreateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, routesHistoryCreate, arg.CreatedAt, arg.Data, arg.RefUserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const routesHistoryGet = `-- name: RoutesHistoryGet :many
SELECT  id, created_at, data, ref_user_id
FROM routes_history
WHERE ref_user_id = $1
ORDER BY id DESC
LIMIT 10
`

func (q *Queries) RoutesHistoryGet(ctx context.Context, refUserID int32) ([]RoutesHistory, error) {
	rows, err := q.db.QueryContext(ctx, routesHistoryGet, refUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoutesHistory
	for rows.Next() {
		var i RoutesHistory
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Data,
			&i.RefUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
